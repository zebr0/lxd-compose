#!/usr/bin/python3 -u

import requests_unixsocket

base_url = "http+unix://%2Fvar%2Flib%2Flxd%2Funix.socket"
session = requests_unixsocket.Session()


class Resource:
    def __init__(self, url, name):
        self._url = url
        self._name = name

    def exists(self):
        return any(filter(
            lambda a: a == self._url + "/" + self._name,
            session.get(base_url + self._url).json().get("metadata")
        ))

    def _create_sync(self, json):
        if not self.exists():
            session.post(base_url + self._url, json=json)
            if not self.exists():
                raise Exception

    def _create_async(self, json):
        if not self.exists():
            response = session.post(base_url + self._url, json=json)
            session.get(base_url + response.json().get("operation") + "/wait")
            if not self.exists():
                raise Exception

    def delete(self):
        if self.exists():
            session.delete(base_url + self._url + "/" + self._name)
            if self.exists():
                raise Exception


class Network(Resource):
    def __init__(self, project, config):
        super().__init__("/1.0/networks", project + "0")
        self._address = config.get("network_address")
        self._domain = project

    def create(self):
        super()._create_sync({
            "name": self._name,
            "config": {
                "ipv4.address": self._address,
                "ipv4.nat": "true",
                "ipv6.address": "none",
                "dns.mode": "dynamic",
                "dns.domain": self._domain
            }
        })


class Profile(Resource):
    def __init__(self, project):
        super().__init__("/1.0/profiles", project)
        self._network = project + "0"

    def create(self):
        super()._create_sync({
            "name": self._name,
            "devices": {
                "eth0": {
                    "type": "nic",
                    "nictype": "bridged",
                    "parent": self._network
                }
            }
        })


class Container(Resource):
    def __init__(self, name):
        super().__init__("/1.0/containers", name)

    def is_running(self):
        return self.exists() and session.get(base_url + self._url + "/" + self._name).json().get("metadata").get(
            "status") == "Running"

    def start(self):
        if not self.exists():
            raise Exception

        if not self.is_running():
            response = session.put(base_url + self._url + "/" + self._name + "/state", json={"action": "start"})
            session.get(base_url + response.json().get("operation") + "/wait")
            if not self.is_running():
                raise Exception


class ImageContainer(Container):
    def __init__(self, project):
        super().__init__(project)

    def create(self):
        super()._create_async({
            "name": self._name,
            "profiles": ["default", "image"],
            "source": {
                "type": "image",
                "properties": {
                    "os": "ubuntu",
                    "release": "xenial",
                }
            }
        })


class ApplicationContainer(Container):
    def __init__(self, type, project, stage):
        super().__init__("-".join([type, project, stage]))
        self._project = project

    def create(self):
        super()._create_async({
            "name": self._name,
            "profiles": ["default", "container", self._project],
            "source": {
                "type": "image",
                "alias": self._project
            }
        })


class Image(Resource):
    def __init__(self, project):
        super().__init__("/1.0/images", project)
        self._container = ImageContainer(project)

    def create(self):
        self._container.create()
        self._container.start()


project = "torii"
stage = "alpha"
config = {
    "network_address": "10.42.1.1/24",
    "containers": ["postgresql", "wildfly", "deploy"]
}

network = Network(project, config)
network.create()
profile = Profile(project)
profile.create()
image = Image(project)
image.create()

session.close()
