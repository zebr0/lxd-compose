#!/usr/bin/python3 -u

import argparse
import logging
import sys

import requests_unixsocket
import yaml

api_url = "http+unix://%2Fvar%2Flib%2Flxd%2Funix.socket"


# this "hook" will be executed after each request to allow some generic treatment of the response
# see http://docs.python-requests.org/en/master/user/advanced/#event-hooks
def hook(response, **kwargs):
    json = response.json()
    session_logger.debug(json)

    type = json.get("type")

    if type == "error":
        raise Exception(json)

    # this will wait for lxd asynchronous operations to be finished
    # see https://github.com/lxc/lxd/blob/master/doc/rest-api.md#background-operation
    if type == "async":
        wait_json = session.get(api_url + json.get("operation") + "/wait").json()
        if wait_json.get("metadata").get("status_code") != 200:
            raise Exception(wait_json)


# opens a unix socket session and adds the hook defined above
session = requests_unixsocket.Session()
session.hooks["response"].append(hook)
session_logger = logging.getLogger("lxd-compose.Session")

# loads the configuration from stdin (uses the yaml baseloader to preserve all strings)
config = yaml.load(sys.stdin, Loader=yaml.BaseLoader) or {}


# parent (abstract) class for all lxd resources
class Resource:
    def __init__(self, collection_url, resource_config):
        # relative url for this type of lxd resource (for example: "/1.0/containers")
        self._collection_url = collection_url
        # the configuration of this specific resource
        self._resource_config = resource_config
        # the logger for this resource
        self._logger = logging.getLogger("lxd-compose." + self.__class__.__name__)

    # creates this specific resource
    def create(self):
        self._log("checking")
        # only does something if the resource doesn't already exist (idempotence)
        if not self._exists():
            self._log("creating")
            session.post(self._get_full_collection_url(), json=self._resource_config)
            if not self._exists():
                raise Exception("resource creation failed")

    # deletes this specific resource
    def delete(self):
        self._log("checking")
        # only does something if the resource exists (idempotence)
        if self._exists():
            self._log("deleting")
            session.delete(self._get_full_element_url())
            if self._exists():
                raise Exception("resource deletion failed")

    # returns whether this specific resource exists or not...
    def _exists(self):
        # by checking if the resource's name is listed in the response of the collection url
        return any(filter(
            lambda a: a == self._get_element_url(),
            session.get(self._get_full_collection_url()).json().get("metadata")
        ))

    # returns the full url for this type of lxd resource
    def _get_full_collection_url(self):
        return api_url + self._collection_url

    # returns the resource's name
    def _get_name(self):
        return self._resource_config.get("name")

    # returns the resource's relative url
    def _get_element_url(self):
        return self._collection_url + "/" + self._get_name()

    # returns the resource's full url
    def _get_full_element_url(self):
        return self._get_full_collection_url() + "/" + self._get_name()

    # default logging function
    def _log(self, action):
        self._logger.info("%s %s", action, self._get_element_url())


class StoragePool(Resource):
    def __init__(self, resource_config):
        super().__init__("/1.0/storage-pools", resource_config)


class Network(Resource):
    def __init__(self, resource_config):
        super().__init__("/1.0/networks", resource_config)


class Profile(Resource):
    def __init__(self, resource_config):
        super().__init__("/1.0/profiles", resource_config)


class Container(Resource):
    def __init__(self, resource_config):
        super().__init__("/1.0/containers", resource_config)

    # starts the container
    def start(self):
        if not self._exists():
            raise Exception("container starting failed: container must exist")

        # only does something if the resource isn't already running (idempotence)
        if not self._is_running():
            self._log("starting")
            session.put(self._get_full_element_url() + "/state", json={"action": "start"})
            if not self._is_running():
                raise Exception("container starting failed")

    # stops the container
    def stop(self):
        if not self._exists():
            raise Exception("container stopping failed: container must exist")

        # only does something if the resource is running (idempotence)
        if self._is_running():
            self._log("stopping")
            session.put(self._get_full_element_url() + "/state", json={"action": "stop"})
            if self._is_running():
                raise Exception("container stopping failed")

    # returns whether the container is running or not...
    def _is_running(self):
        # by checking its status in the metadata
        return self._exists() and session.get(self._get_full_element_url()).json().get("metadata").get("status") == "Running"


def create():
    for item in config.get("storage_pools") or []:
        StoragePool(item).create()
    for item in config.get("networks") or []:
        Network(item).create()
    for item in config.get("profiles") or []:
        Profile(item).create()
    for item in config.get("containers") or []:
        Container(item).create()


def start():
    for item in config.get("containers") or []:
        Container(item).start()


def stop():
    for item in config.get("containers") or []:
        Container(item).stop()


def delete():
    for item in config.get("containers") or []:
        Container(item).delete()
    for item in config.get("profiles") or []:
        Profile(item).delete()
    for item in config.get("networks") or []:
        Network(item).delete()
    for item in config.get("storage_pools") or []:
        StoragePool(item).delete()


argparser = argparse.ArgumentParser(description="Define and run multi-container applications with LXD.")
argparser.add_argument("command", choices=["create", "start", "stop", "delete"], help="command to execute on the configuration given through stdin")
argparser.add_argument("--debug", action="store_true")
args = argparser.parse_args()

# configures the root logger
stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setFormatter(logging.Formatter("{asctime} | {levelname:<7.7} | {name:<25.25} | {message}", style="{"))
root_logger = logging.getLogger()
root_logger.setLevel(logging.DEBUG if args.debug else logging.INFO)
root_logger.addHandler(stream_handler)

# calls the method given as parameter
globals()[args.command]()

session.close()
