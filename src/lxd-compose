#!/usr/bin/python3 -u

import requests_unixsocket

base_url = "http+unix://%2Fvar%2Flib%2Flxd%2Funix.socket"
session = requests_unixsocket.Session()


class Network:
    networks_url = "/1.0/networks"

    def __init__(self, project, config):
        self._name = project + "0"
        self._address = config.get("network_address")
        self._domain = project

    def exists(self):
        return any(filter(
            lambda a: a == self.networks_url + "/" + self._name,
            session.get(base_url + self.networks_url).json().get("metadata")
        ))

    def create(self):
        if not self.exists():
            session.post(base_url + self.networks_url, json={
                "name": self._name,
                "config": {
                    "ipv4.address": self._address,
                    "ipv4.nat": "true",
                    "ipv6.address": "none",
                    "dns.mode": "dynamic",
                    "dns.domain": self._domain
                }
            })
            if not self.exists():
                raise Exception


class Profile:
    profiles_url = "/1.0/profiles"

    def __init__(self, project):
        self._name = project
        self._network = project + "0"

    def exists(self):
        return any(filter(
            lambda a: a == self.profiles_url + "/" + self._name,
            session.get(base_url + self.profiles_url).json().get("metadata")
        ))

    def create(self):
        if not self.exists():
            session.post(base_url + self.profiles_url, json={
                "name": self._name,
                "devices": {
                    "eth0": {
                        "type": "nic",
                        "nictype": "bridged",
                        "parent": self._network
                    }
                }
            })
            if not self.exists():
                raise Exception


project = "torii"
stage = "alpha"
config = {
    "network_address": "10.42.1.1/24",
    "containers": ["postgresql", "wildfly", "deploy"]
}

network = Network(project, config)
network.create()
profile = Profile(project)
profile.create()

session.close()
