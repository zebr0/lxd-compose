#!/usr/bin/python3 -u

import argparse
import configparser
import json
import time
import urllib.request

import requests_unixsocket


# handles the configuration
class Configuration:
    def __init__(self):
        # reads the configuration file first from /etc then from the working directory if present
        parser = configparser.ConfigParser()
        parser.read(["/etc/lxd-compose.conf", "lxd-compose.conf"])

        self._base_url = parser.get("config", "base_url",
                                    fallback="https://raw.githubusercontent.com/mazerty/lxd-compose-files/master")

        self._api_url = parser.get("config", "api_url", fallback="http+unix://%2Fvar%2Flib%2Flxd%2Funix.socket")

    def get_project_config(self, project):
        return json.loads(urllib.request.urlopen(self._base_url + "/" + project).read().decode("ascii"))

    def get_api_url(self): return self._api_url


# reads the configuration for the rest of the script
config = Configuration()
session = requests_unixsocket.Session()


def wait(response):
    if response.json().get("type") == "async":
        session.get(config.get_api_url() + response.json().get("operation") + "/wait")


class Resource:
    def __init__(self, collection_url, name):
        self._collection_url = collection_url
        self._name = name

    def get_full_collection_url(self):
        return config.get_api_url() + self._collection_url

    def get_full_element_url(self):
        return self.get_full_collection_url() + "/" + self._name

    def exists(self, url_suffix=""):
        return any(filter(
            lambda a: a == self._collection_url + url_suffix + "/" + self._name,
            session.get(self.get_full_collection_url() + url_suffix).json().get("metadata")
        ))

    def _create(self, json):
        if not self.exists():
            wait(session.post(self.get_full_collection_url(), json=json))
            if not self.exists():
                raise Exception

    def delete(self):
        if self.exists():
            wait(session.delete(self.get_full_element_url()))
            if self.exists():
                raise Exception


class Network(Resource):
    def __init__(self, project, config):
        super().__init__("/1.0/networks", project + "0")
        self._address = config.get("network_address")
        self._domain = project

    def create(self):
        super()._create({
            "name": self._name,
            "config": {
                "ipv4.address": self._address,
                "ipv4.nat": "true",
                "ipv6.address": "none",
                "dns.mode": "dynamic",
                "dns.domain": self._domain
            }
        })


class Profile(Resource):
    def __init__(self, project):
        super().__init__("/1.0/profiles", project)
        self._network = project + "0"

    def create(self):
        super()._create({
            "name": self._name,
            "devices": {
                "eth0": {
                    "type": "nic",
                    "nictype": "bridged",
                    "parent": self._network
                }
            }
        })


class Container(Resource):
    def __init__(self, name):
        super().__init__("/1.0/containers", name)

    def is_running(self):
        return self.exists() and session.get(self.get_full_element_url()).json().get("metadata").get(
            "status") == "Running"

    def start(self):
        if not self.exists():
            raise Exception

        if not self.is_running():
            wait(session.put(self.get_full_element_url() + "/state", json={"action": "start"}))
            if not self.is_running():
                raise Exception

    def stop(self):
        if not self.exists():
            raise Exception

        if self.is_running():
            wait(session.put(self.get_full_element_url() + "/state", json={"action": "stop"}))
            if self.is_running():
                raise Exception


class ImageContainer(Container):
    def __init__(self, project):
        super().__init__(project)

    def create(self):
        super()._create({
            "name": self._name,
            "profiles": ["default", "image"],
            "source": {
                "type": "image",
                "properties": {
                    "os": "ubuntu",
                    "release": "xenial",
                }
            }
        })


class ApplicationContainer(Container):
    def __init__(self, type, project, stage):
        super().__init__("-".join([type, project, stage]))
        self._project = project

    def create(self):
        super()._create({
            "name": self._name,
            "profiles": ["default", "container", self._project],
            "source": {
                "type": "image",
                "alias": self._project
            }
        })


class Image(Resource):
    def __init__(self, project):
        super().__init__("/1.0/images", project)
        self._container = ImageContainer(project)

    def exists(self, **kwargs):
        return super().exists("/aliases")

    def create(self):
        if not self.exists():
            self._container.create()
            self._container.start()
            while self._container.is_running():
                time.sleep(1)
            wait(session.post(self.get_full_collection_url(), json={
                "aliases": [{"name": self._name}],
                "source": {
                    "type": "container",
                    "name": self._name
                }
            }))
            self._container.delete()
            if not self.exists() or self._container.exists():
                raise Exception


def run(args):
    project_config = config.get_project_config(args.project)

    network = Network(args.project, project_config)
    network.create()
    profile = Profile(args.project)
    profile.create()
    image = Image(args.project)
    image.create()
    for type in project_config.get("containers"):
        container = ApplicationContainer(type, args.project, args.stage)
        container.create()
        container.start()


def stop(args):
    project_config = config.get_project_config(args.project)

    for type in project_config.get("containers"):
        container = ApplicationContainer(type, args.project, args.stage)
        container.stop()


argparser = argparse.ArgumentParser()
subparsers = argparser.add_subparsers()

parser_run = subparsers.add_parser("run")
parser_run.add_argument("project", nargs="?")
parser_run.add_argument("stage", nargs="?")
parser_run.set_defaults(func=run)

parser_stop = subparsers.add_parser("stop")
parser_stop.add_argument("project", nargs="?")
parser_stop.add_argument("stage", nargs="?")
parser_stop.set_defaults(func=stop)

args = argparser.parse_args()
args.func(args)

session.close()
